# Move all NaNs to the end of the array `A`
function sortnans!(A, i‚Çó=firstindex(A), i·µ§=lastindex(A))
    # Count up NaNs
    N‚Çô‚Çê‚Çô = 0
    @turbo for i = i‚Çó:i·µ§
        N‚Çô‚Çê‚Çô += A[i] != A[i]
    end
    # If none, return early
    N‚Çô‚Çê‚Çô == 0 && return A, i‚Çó, i·µ§

    # Otherwise, swap all NaNs
    i = i‚Çó
    j = i·µ§
    N = i·µ§ - i‚Çó
    @inbounds for n = 0:N-N‚Çô‚Çê‚Çô
        i = i‚Çó + n
        if A[i] != A[i]
            while A[j] != A[j]
                j -= 1
            end
            j <= i && break
            A[i], A[j] = A[j], A[i]
            j -= 1
        end
    end
    return A, i‚Çó, i·µ§ - N‚Çô‚Çê‚Çô
end
# For integers, don't need to check for NaNs
sortnans!(A::AbstractArray{<:Integer}, i‚Çó=firstindex(A), i·µ§=lastindex(A)) = A, i‚Çó, i·µ§

# Check for sortedness, assuming no NaNs
@inline function issortedrange(A, i‚Çó, i·µ§)
    @inbounds for i = i‚Çó+1:i·µ§
        if A[i-1] > A[i]
            return false
        end
    end
    return true
end

# Check for anti-sortedness, assuming no NaNs
@inline function isantisortedrange(A, i‚Çó, i·µ§)
    @inbounds for i = i‚Çó+1:i·µ§
        if A[i-1] < A[i]
            return false
        end
    end
    return true
end

# Reverse an array, faster than Base.reverse!
@inline function vreverse!(A, i‚Çó, i·µ§)
    N = (i·µ§ - i‚Çó) + 1
    n = (N √∑ 2) - 1
    if N < 32
        @inbounds for i ‚àà 0:n
            ùî¶‚Çó, ùî¶·µ§ = i‚Çó+i, i·µ§-i
            A[ùî¶‚Çó], A[ùî¶·µ§] = A[ùî¶·µ§], A[ùî¶‚Çó]
        end
    else
        @turbo for i ‚àà 0:n
            ùî¶‚Çó = i‚Çó+i
            ùî¶·µ§ = i·µ§-i
            l = A[ùî¶‚Çó]
            u = A[ùî¶·µ§]
            A[ùî¶‚Çó] = u
            A[ùî¶·µ§] = l
        end
    end
    return A
end

# Partially sort `A` around the `k`th sorted element and return that element
function quickselect!(A::AbstractArray, i‚Çó=firstindex(A), i·µ§=lastindex(A), k=(i‚Çó+i·µ§)√∑2)
    # Pick a pivot for partitioning
    N = i·µ§ - i‚Çó + 1
    A[i‚Çó], A[k] = A[k], A[i‚Çó]
    pivot = A[i‚Çó]

    # Count up elements that must be moved to upper partition
    N·µ§ = 0
    @turbo for i = (i‚Çó+1):i·µ§
        N·µ§ += A[i] >= pivot
    end
    N‚Çó = N - N·µ§

    # Swap elements between upper and lower partitions
    i = i‚Çó
    j = i·µ§
    @inbounds for n = 1:N‚Çó-1
        i = i‚Çó + n
        if A[i] >= pivot
            while A[j] >= pivot
                j -= 1
            end
            j <= i && break
            A[i], A[j] = A[j], A[i]
            j -= 1
        end
    end
    # Move pivot to the top of the lower partition
    i‚Çö = i‚Çó + N‚Çó - 1
    A[i‚Çó], A[i‚Çö] = A[i‚Çö], A[i‚Çó]
    # Recurse: select from partition containing k
    (i‚Çó <= k < i‚Çö) && quickselect!(A, i‚Çó, i‚Çö, k)
    (i‚Çö < k <= i·µ§) && quickselect!(A, i‚Çö+1, i·µ§, k)
    return A[k]
end


# Sort `A`, assuming no NaNs
function quicksort!(A, i‚Çó=firstindex(A), i·µ§=lastindex(A))
    if issortedrange(A, i‚Çó, i·µ§)
        # If already sorted, we're done here
        return A
    end
    # Otherwise, we have to sort
    N = i·µ§ - i‚Çó + 1
    if isantisortedrange(A, i‚Çó, i·µ§)
        vreverse!(A, i‚Çó, i·µ§)
        return A
    elseif N == 3
        # We know we are neither sorted nor antisorted, so only four possibilities remain
        i‚Çò = i‚Çó + 1
        a,b,c = A[i‚Çó], A[i‚Çò], A[i·µ§]
        if a <= b
            if a <= c
                A[i‚Çò], A[i·µ§] = c, b             # a ‚â§ c ‚â§ b
            else
                A[i‚Çó], A[i‚Çò], A[i·µ§] = c, a, b   # c ‚â§ a ‚â§ b
            end
        else
            if a <= c
                A[i‚Çó], A[i‚Çò] = b, a             # b ‚â§ a ‚â§ c
            else
                A[i‚Çó], A[i‚Çò], A[i·µ§] = b, c, a   # b ‚â§ c ‚â§ a
            end
        end
        return A
    else
        # Pick a pivot for partitioning
        i‚Çö = i‚Çó + (N >> 2)
        A[i‚Çó], A[i‚Çö] = A[i‚Çö], A[i‚Çó]
        pivot = A[i‚Çó]

        # Count up elements that must be moved to upper partition
        N·µ§ = 0
        @turbo for i = (i‚Çó+1):i·µ§
            N·µ§ += A[i] >= pivot
        end
        N‚Çó = N - N·µ§

        # Swap elements between upper and lower partitions
        i = i‚Çó
        j = i·µ§
        @inbounds for n = 1:N‚Çó-1
            i = i‚Çó + n
            if A[i] >= pivot
                while A[j] >= pivot
                    j -= 1
                end
                j <= i && break
                A[i], A[j] = A[j], A[i]
                j -= 1
            end
        end
        # Move pivot to the top of the lower partition
        i‚Çö = i‚Çó + N‚Çó - 1
        A[i‚Çó], A[i‚Çö] = A[i‚Çö], A[i‚Çó]
        # Recurse: sort both upper and lower partitions
        quicksort!(A, i‚Çó, i‚Çö)
        quicksort!(A, i‚Çö+1, i·µ§)
    end
end

# Sort `A`, assuming no NaNs, multithreaded
function quicksortt!(A, i‚Çó=firstindex(A), i·µ§=lastindex(A), level=1)
    if issortedrange(A, i‚Çó, i·µ§)
        # If already sorted, we're done here
        return A
    end
    # Otherwise, we have to sort
    N = i·µ§ - i‚Çó + 1
    if isantisortedrange(A, i‚Çó, i·µ§)
        vreverse!(A, i‚Çó, i·µ§)
        return A
    elseif N == 3
        # We know we are neither sorted nor antisorted, so only four possibilities remain
        i‚Çò = i‚Çó + 1
        a,b,c = A[i‚Çó], A[i‚Çò], A[i·µ§]
        if a <= b
            if a <= c
                A[i‚Çò], A[i·µ§] = c, b             # a ‚â§ c ‚â§ b
            else
                A[i‚Çó], A[i‚Çò], A[i·µ§] = c, a, b   # c ‚â§ a ‚â§ b
            end
        else
            if a <= c
                A[i‚Çó], A[i‚Çò] = b, a             # b ‚â§ a ‚â§ c
            else
                A[i‚Çó], A[i‚Çò], A[i·µ§] = b, c, a   # b ‚â§ c ‚â§ a
            end
        end
        return A
    else
        # Pick a pivot for partitioning
        i‚Çö = i‚Çó + (N >> 2)
        A[i‚Çó], A[i‚Çö] = A[i‚Çö], A[i‚Çó]
        pivot = A[i‚Çó]

        # Count up elements that must be moved to upper partition
        N·µ§ = 0
        @turbo for i = (i‚Çó+1):i·µ§
            N·µ§ += A[i] >= pivot
        end
        N‚Çó = N - N·µ§

        # Swap elements between upper and lower partitions
        i = i‚Çó
        j = i·µ§
        @inbounds for n = 1:N‚Çó-1
            i = i‚Çó + n
            if A[i] >= pivot
                while A[j] >= pivot
                    j -= 1
                end
                j <= i && break
                A[i], A[j] = A[j], A[i]
                j -= 1
            end
        end
        # Move pivot to the top of the lower partition
        i‚Çö = i‚Çó + N‚Çó - 1
        A[i‚Çó], A[i‚Çö] = A[i‚Çö], A[i‚Çó]
        # Recurse: sort both upper and lower partitions
        if level < 7
            @sync begin
                Threads.@spawn quicksortt!(A, i‚Çó, i‚Çö, level+1)
                Threads.@spawn quicksortt!(A, i‚Çö+1, i·µ§, level+1)
            end
        else
            quicksort!(A, i‚Çó, i‚Çö)
            quicksort!(A, i‚Çö+1, i·µ§)
        end
        return A
    end
end
